/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package central;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TreeMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

/**
 *
 * @author David
 */
public class CTPV_Frame extends javax.swing.JFrame {

    private Terminal_Frame[] lista;

    private Thread servidor;

    private StartInforme informe;
    private TreeMap<String, Informe> registro;

    private File fichero;

    private PublicKey publica;

    /**
     * Creates new form CTPV_Frame
     */
    public CTPV_Frame() {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);

        this.lista = new Terminal_Frame[6];
        this.registro = new TreeMap<String, Informe>();

        this.servidor = new Thread(new Server(this));
        this.servidor.start();

        this.fichero = new File("Ventas.dat");

        try {

            this.publica = recuperarClavePublicaDeFichero();

            System.out.println(fichero.createNewFile());
//            this.out = new PrintWriter (new FileWriter(fichero,true));
//            this.facturacion = new Facturacion(fichero);
        } catch (IOException ex) {
            Logger.getLogger(CTPV_Frame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(CTPV_Frame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(CTPV_Frame.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.registro = new TreeMap<String, Informe>();
        this.informe = new StartInforme(this);
        new Thread(this.informe).start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPanel = new javax.swing.JDesktopPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CTPV");
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/Icono/Tienda.jpg")).getImage());

        jDesktopPanel.setLayout(new java.awt.GridLayout(2, 3));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CTPV_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CTPV_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CTPV_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CTPV_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CTPV_Frame().setVisible(true);
            }
        });
    }

    /**
     * Método que devuelve la primera posición disponible de la lista de
     * terminales
     *
     * @return
     */
    public int primeroLibre() {
        int x = -1;
        for (int i = 0; i < 6; i++) {

            if (lista[i] == null) {
                x = i;
                break;
            }
        }
        return x;

    }

    /**
     * Método que inserta el terminal que recibe como parametro en el panel
     * contenedor del frame
     *
     * @param terminal
     */
    public void insertarTerminal(Terminal_Frame terminal) {
        int i = primeroLibre();

        this.jDesktopPanel.add(terminal);

        terminal.setVisible(true);

        this.lista[i] = terminal;
    }

    /**
     * Método que borra del panel contenedor del frame el Terminal_frame que
     * recibe como parametro y devuelve true si lleva a cabo la operación y
     * false si no se lleva a cabo.
     *
     * @param terminal
     * @return boolean
     */
    public boolean borrarTerminal(Terminal_Frame terminal) {
        boolean hecho = false;

        for (int i = 0; i < 6; i++) {

            if (this.lista[i] == terminal) {
                this.lista[i] = null;
                this.jDesktopPanel.setVisible(false);
                this.jDesktopPanel.remove(terminal);
                this.jDesktopPanel.setVisible(true);
                this.repaint();
                hecho = true;
                break;
            }
        }

        return hecho;

    }

    public PublicKey recuperarClavePublicaDeFichero() throws FileNotFoundException, IOException, NoSuchAlgorithmException, InvalidKeySpecException {
        File aux;
        PublicKey clavePub = null;

        JFileChooser explorador = new JFileChooser("C:\\Users\\David\\Documents\\NetBeansProjects\\TPV");
        explorador.setDialogTitle("Seleccione clave pública");

        int seleccion = explorador.showOpenDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            aux = explorador.getSelectedFile();

            FileInputStream in = new FileInputStream(aux);

            int numBytes = in.available();
            byte[] auxPub = new byte[numBytes];
            in.read(auxPub);
            //
            X509EncodedKeySpec X509 = new X509EncodedKeySpec(auxPub);
            //
            //Creamos un objeto para descifrar la publica con el algoritmo que la creo
            KeyFactory keyRSA = KeyFactory.getInstance("RSA");
            //le pasamos el objeto y devuelve la clave publica
            clavePub = keyRSA.generatePublic(X509);
            //
            System.out.println("Publica recuperada");

        }
        return clavePub;
    }

    /**
     * Método sincronizado que guarda en el fichero del objeto CTPV_Frame la
     * compra llevada a cabo en el terminal que controla el hilo del objeto
     * Venta. Recibe como parametro el socket para cerrarlo y el terminal donde
     * esta la tabla de la compra.
     *
     * @param socket
     * @param terminal
     * @throws IOException
     * @throws ClassNotFoundException
     */
    public synchronized void guardarVenta(Socket socket, Terminal_Frame terminal) throws IOException, ClassNotFoundException {
        //Cierro el socket
        socket.close();

        if (terminal.getModeloTabla().getRowCount() > 0) {//comprueba si hay productos en la compra
            double total = 0.0;
            DecimalFormat decimales;
            decimales = new DecimalFormat("0.00");
            StringBuilder contenido = new StringBuilder();

            //Creamos el flujo de escritura
            PrintWriter out = new PrintWriter(new FileWriter(fichero, true));

            //Coloco la fecha formateada para distinguir las compras
            SimpleDateFormat fecha = new SimpleDateFormat("HH:mm:ss EEEE d MMMM yyyy");
            out.println(fecha.format(new Date()));
            out.flush();

            //cogo las lineas de la compra
            for (int i = 0; i < terminal.getModeloTabla().getRowCount(); i++) {
                Vector linea = (Vector) terminal.getModeloTabla().getDataVector().get(i);
                if (contenido.length() > 0) {
                    contenido.delete(0, contenido.length());
                }
                contenido.append(String.valueOf(i + 1));

                for (int j = 0; j < linea.size(); j++) {
                    contenido.append("   ||   ");
                    contenido.append(linea.get(j));
                    if (j == 0) {
                        contenido.setLength(40);
                    }
                    if (j == 2) {
                        total = total + Double.parseDouble((String) linea.get(j));
                    }
                }

                //Ecribimos en el archivo las linea de la compra
                out.println(contenido.toString());
                out.flush();

            }
            //Escribimos el total
            out.println("                                           Total : " + decimales.format(total) + " €");
            out.flush();
            //Escribimos el cierre de la compra 
            out.println("***********************************************************");
            out.flush();
            //Cerramos el flujo de comunicación
            out.close();

        }
        terminal.compraFinalizada();//Muestro la ventana emergente
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPanel;
    // End of variables declaration//GEN-END:variables

    //**************************************************************************
    //GETTERS & SETTERS
    public Terminal_Frame[] getLista() {
        return lista;
    }

    public void setLista(Terminal_Frame[] lista) {
        this.lista = lista;
    }

    public Thread getServidor() {
        return servidor;
    }

    public void setServidor(Thread servidor) {
        this.servidor = servidor;
    }

    public javax.swing.JDesktopPane getjDesktopPanel() {
        return jDesktopPanel;
    }

    public void setjDesktopPanel(javax.swing.JDesktopPane jDesktopPanel) {
        this.jDesktopPanel = jDesktopPanel;
    }

    public File getFichero() {
        return fichero;
    }

    public StartInforme getInforme() {
        return informe;
    }

    public TreeMap<String, Informe> getRegistro() {
        return registro;
    }

    public PublicKey getPublica() {
        return publica;
    }

}
